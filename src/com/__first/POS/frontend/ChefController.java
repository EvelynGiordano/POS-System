package com.__first.POS.frontend;

import java.io.IOException;
import java.sql.SQLException;
import java.util.Calendar;

import com.__first.POS.backend.DatabaseInterface;
import com.__first.POS.backend.Order;
import com.__first.POS.backend.OrderItem;
import com.__first.POS.backend.Orders;

import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

/**
 * Controller class for the Chef view.
 * (Chef.fxml)
 */
public class ChefController {

	private static final int START_TIME=30;
	private static final long TEN_MIN_MILLIS=600000;
	private static final long TWENTY_MIN_MILLIS=TEN_MIN_MILLIS*2;
	private static final String GREEN_STYLE="-fx-background-color: lightgreen";
	private static final String ORANGE_STYLE="-fx-background-color: #ffba00";
	private static final String RED_STYLE="-fx-background-color: #ff7b5a";
	private static final String PATH_TO_LOGIN="/com/__first/POS/frontend/SignIn.fxml";
	private DatabaseInterface dbi;
	private IntegerProperty timeSeconds=new SimpleIntegerProperty(5);
	private Timeline timeline;
	private Orders orders;

	@FXML
	private FlowPane orderFlowPane;

	@FXML
	private ScrollPane scrollPane;

	@FXML
	private Label timerLabel;

	public void initialize() {
		//Increse the width of scrollbar if desired.
//		Set<Node> nodes=scrollPane.lookupAll(".scroll-bar");
//		for (final Node node : nodes) {
//			if (node instanceof ScrollBar) {
//				ScrollBar sb = (ScrollBar) node;
//				if (sb.getOrientation() == Orientation.VERTICAL) {
//					sb.setStyle("-fx-min-width: 25");
//					sb.setStyle("-fx-pref-width: 25");
//				}
//			}
//		}

		//Scroll horizontally on mouse wheel vertical
		scrollPane.setOnScroll(event -> {
			if(event.getDeltaX()==0 && event.getDeltaY()!=0) {
				scrollPane.setHvalue(scrollPane.getHvalue()-event.getDeltaY()/orderFlowPane.getWidth());
			}
		});

		//Bind the timer and start the countdown
		timerLabel.textProperty().bind(timeSeconds.asString());
		countdownStart();

		//Initial fetch of orders
		fetchOrders();
	}

	/**
	 * Executed when the countdown finishes.
	 * Updates the displayed orders and restarts the countdown.
	 */
	private void countdownFinishedHandler() {
		fetchOrders();
		countdownStart();
	}

	/**
	 * Starts the count-down.
	 * Restarts the count-down if it is already running.
	 */
	private void countdownStart() {
		if(timeline!=null)
			timeline.stop();
		timeSeconds.set(START_TIME);
		timeline=new Timeline();
		timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(START_TIME+1), new KeyValue(timeSeconds, 0)));
		timeline.playFromStart();
		timeline.setOnFinished((e) -> countdownFinishedHandler());
	}

	/**
	 * Called when the complete button is pressed on any order.
	 * Marks the corresponding order as complete.
	 * 
	 * @param e The ActionEvent generated by the button press
	 */
	@FXML
	private void completePressed(ActionEvent e) {
		Button clickedButton=(Button) e.getSource();
		VBox orderVB=(VBox) clickedButton.getParent();
		HBox orderIDHB=(HBox) orderVB.getChildren().get(0);
		Text orderID=(Text) orderIDHB.getChildren().get(0);
		long intOrderID=Long.parseLong(orderID.getText());
		try {
			dbi.markOrderCompleted(intOrderID);
		}catch(SQLException e1) {
			popup("Database connection error", ""+e);
		}
		countdownFinishedHandler();
	}

	/**
	 * Gets all active orders from the database.
	 * Also draws them to the screen.
	 */
	private void fetchOrders() {
		try {
			dbi=DatabaseInterface.getInstance();
			orders=dbi.getOrders();
			drawOrders(orders);
		}catch(SQLException e) {
			popup("Database connection error", ""+e);
		}
	}

	/**
	 * Draws all given orders.
	 * 
	 * @param orders The orders to be drawn
	 */
	private void drawOrders(Orders orders) {
		Platform.runLater(() -> {
			orderFlowPane.getChildren().clear();
			for(Order order : orders.getOrders())
				createOrderView(order);
		});
	}

	/**
	 * Draws the given order to the screen.
	 * 
	 * @param order The order to be drawn
	 */
	private void createOrderView(Order order) {
		//Get the time difference for coloring the order
		Calendar c=Calendar.getInstance();
		Calendar c2=order.getDateTime();
		long timeDiff=c.getTimeInMillis()-c2.getTimeInMillis();
		String styleString;
		if(timeDiff<TEN_MIN_MILLIS) {
			styleString=GREEN_STYLE;
		}else if(timeDiff<TWENTY_MIN_MILLIS) {
			styleString=ORANGE_STYLE;
		}else {
			styleString=RED_STYLE;
		}

		//Whole order sits in orderVB
		VBox orderVB=new VBox();
		orderVB.setAlignment(Pos.TOP_CENTER);
		//HB for orderID
		HBox orderIDHB=new HBox();
		orderIDHB.setStyle(styleString);
		orderIDHB.setAlignment(Pos.CENTER);
		Text orderIDText=new Text(""+order.getOrderID());
		orderIDText.setFont(Font.font("system", FontWeight.NORMAL, FontPosture.REGULAR, 16));
		orderIDHB.getChildren().add(orderIDText);
		orderVB.getChildren().add(orderIDHB);

		//topHB for order time and server name
		HBox topHB=new HBox(25);
		topHB.setStyle(styleString);
		topHB.setPadding(new Insets(0, 10, 0, 10));
		topHB.setAlignment(Pos.CENTER);
		Font boldFont=Font.font("system", FontWeight.BOLD, FontPosture.REGULAR, 20);
		Font regFont=Font.font("system", FontWeight.NORMAL, FontPosture.REGULAR, 20);
		Text timeText=new Text(order.getOrderTime());
		Text nameText=new Text(order.getPlacedBy());
		timeText.setFont(boldFont);
		nameText.setFont(regFont);
		topHB.getChildren().addAll(timeText, nameText);
		orderVB.getChildren().add(topHB);

		for(OrderItem item : order.getItems()) {
			//itemVB for each item in the order and all its details
			VBox itemVB=new VBox();
			itemVB.setPadding(new Insets(0, 10, 0, 10));
			//HBox for item and number of it
			HBox hb=new HBox(10);
			Text numItemText=new Text(""+item.getNum());
			Text itemText=new Text(item.getName());
			numItemText.setFont(boldFont);
			itemText.setFont(regFont);
			hb.getChildren().addAll(numItemText, itemText);
			itemVB.getChildren().add(hb);
			//Rest of the customization messages
			for(String s : item.getCustomizations()) {
				Text custText=new Text(s);
				VBox.setMargin(custText, new Insets(0, 0, 0, 35));
				custText.setFont(regFont);
				itemVB.getChildren().add(custText);
			}
			orderVB.getChildren().add(itemVB);
		}
		//Complete button
		Button bt=new Button("Complete");
		Font btFont=Font.font("system", FontWeight.NORMAL, FontPosture.REGULAR, 18);
		bt.setFont(btFont);
		VBox.setMargin(bt, new Insets(10, 0, 0, 0));
		bt.setOnAction(this::completePressed);
		orderVB.getChildren().add(bt);
		//Add the orderVB to the display
		orderFlowPane.getChildren().add(orderVB);
	}

	/**
	 * Logs out of the chef view.
	 * Displays the sign in page.
	 * 
	 * @param event The ActionEvent generated by the button press
	 * @throws IOException Thrown on failure to open sign in display
	 */
	@FXML
	private void logout(ActionEvent event) throws IOException {
		timerLabel.textProperty().unbind();
		Parent root=FXMLLoader.load(getClass().getResource(PATH_TO_LOGIN));
		Scene s=new Scene(root);
		s.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		Stage window=(Stage) ((Node) event.getSource()).getScene().getWindow();
		window.setScene(s);
		window.centerOnScreen();
		window.show();
	}

	/**
	 * Popup dialog
	 * 
	 * @param title   the title of the popup dialog
	 * @param message the message of the popup dialog
	 */
	public void popup(String title, String message) {
		Alert alert=new Alert(AlertType.ERROR);
		alert.setTitle("Database Error");
		alert.setHeaderText(title);
		alert.setContentText(message);

		alert.showAndWait();
	}
}
